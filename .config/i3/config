# Author: Vinicius M Longaray
# Mail: vmouralongaray@gmail.com
# Github: @v1nns
#
# Fast and furious! (Rice, Rice, Rice)
#

# win-key is the chosen one as key to win! *ba dum tss*
set $mod Mod4

# Font for window titles. Just be careful, polybar uses a different font.
font pango:monospace 8

# This font is widely installed, provides lots of unicode glyphs, right-to-left
# text rendering and scalability on retina/hidpi displays (thanks to pango).
#font pango:DejaVu Sans Mono 8

# ============================== AUDIO BINDINGS ===============================

# Use pactl to adjust volume in PulseAudio.
set $refresh_i3status killall -SIGUSR1 i3status
bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status

# Audio related key bindings (currently using a custom Python script to control device with Spotify Connect)
bindsym $mod+XF86AudioRaiseVolume exec --no-startup-id spotify_ctl.py --inc-volume
bindsym $mod+XF86AudioLowerVolume exec --no-startup-id spotify_ctl.py --dec-volume
bindsym XF86AudioPlay exec --no-startup-id spotify_ctl.py --toggle-play
bindsym XF86AudioStop exec --no-startup-id spotify_ctl.py --stop
bindsym XF86AudioPrev exec --no-startup-id spotify_ctl.py --previous
bindsym XF86AudioNext exec --no-startup-id spotify_ctl.py --next

# ========================== WORKSPACE DEFINITIONS ============================

# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
# Workspaces for monitor 1
set $ws1 "1"
set $ws2 "2"
set $ws3 "3"
set $ws4 "4"
set $ws5 "5"
set $ws6 "6"
set $ws7 "7"
set $ws8 "8"
set $ws9 "9"
# you can ignore this "camera" string
set $ws10 "10:camera"

# Workspaces for monitor 2
set $ws11 "11"
set $ws12 "12"
set $ws13 "13"
set $ws14 "14"
set $ws15 "15"
set $ws16 "16"
set $ws17 "17"
set $ws18 "18"
set $ws19 "19"
set $ws20 "20"

# TODO: move this to some shell script/python
set $primary "DP-4"
set $secondary "DP-2"

# Bind workspaces to only one monitor
workspace $ws1 output $primary
workspace $ws2 output $primary
workspace $ws3 output $primary
workspace $ws4 output $primary
workspace $ws5 output $primary
workspace $ws6 output $primary
workspace $ws7 output $primary
workspace $ws8 output $primary
workspace $ws9 output $primary
workspace $ws10 output $primary

workspace $ws11 output $secondary
workspace $ws12 output $secondary
workspace $ws13 output $secondary
workspace $ws14 output $secondary
workspace $ws15 output $secondary
workspace $ws16 output $secondary
workspace $ws17 output $secondary
workspace $ws18 output $secondary
workspace $ws19 output $secondary
workspace $ws20 output $secondary

# switch to workspace in monitor 1
bindsym $mod+1 workspace number $ws1
bindsym $mod+2 workspace number $ws2
bindsym $mod+3 workspace number $ws3
bindsym $mod+4 workspace number $ws4
bindsym $mod+5 workspace number $ws5
bindsym $mod+6 workspace number $ws6
bindsym $mod+7 workspace number $ws7
bindsym $mod+8 workspace number $ws8
bindsym $mod+9 workspace number $ws9
bindsym $mod+0 workspace number $ws10

# switch to workspace in monitor 2
bindsym $mod+Control+1 workspace number $ws11
bindsym $mod+Control+2 workspace number $ws12
bindsym $mod+Control+3 workspace number $ws13
bindsym $mod+Control+4 workspace number $ws14
bindsym $mod+Control+5 workspace number $ws15
bindsym $mod+Control+6 workspace number $ws16
bindsym $mod+Control+7 workspace number $ws17
bindsym $mod+Control+8 workspace number $ws18
bindsym $mod+Control+9 workspace number $ws19
bindsym $mod+Control+0 workspace number $ws20

# move any window container to specific workspace in monitor 1
bindsym $mod+Shift+1 exec --no-startup-id new-workspace.py --move $ws1
bindsym $mod+Shift+2 exec --no-startup-id new-workspace.py --move $ws2
bindsym $mod+Shift+3 exec --no-startup-id new-workspace.py --move $ws3
bindsym $mod+Shift+4 exec --no-startup-id new-workspace.py --move $ws4
bindsym $mod+Shift+5 exec --no-startup-id new-workspace.py --move $ws5
bindsym $mod+Shift+6 exec --no-startup-id new-workspace.py --move $ws6
bindsym $mod+Shift+7 exec --no-startup-id new-workspace.py --move $ws7
bindsym $mod+Shift+8 exec --no-startup-id new-workspace.py --move $ws8
bindsym $mod+Shift+9 exec --no-startup-id new-workspace.py --move $ws9
bindsym $mod+Shift+0 exec --no-startup-id new-workspace.py --move $ws10

# move any window container to specific workspace in monitor 2
bindsym $mod+Control+Shift+1 exec --no-startup-id new-workspace.py --move $ws11
bindsym $mod+Control+Shift+2 exec --no-startup-id new-workspace.py --move $ws12
bindsym $mod+Control+Shift+3 exec --no-startup-id new-workspace.py --move $ws13
bindsym $mod+Control+Shift+4 exec --no-startup-id new-workspace.py --move $ws14
bindsym $mod+Control+Shift+5 exec --no-startup-id new-workspace.py --move $ws15
bindsym $mod+Control+Shift+6 exec --no-startup-id new-workspace.py --move $ws16
bindsym $mod+Control+Shift+7 exec --no-startup-id new-workspace.py --move $ws17
bindsym $mod+Control+Shift+8 exec --no-startup-id new-workspace.py --move $ws18
bindsym $mod+Control+Shift+9 exec --no-startup-id new-workspace.py --move $ws19
bindsym $mod+Control+Shift+0 exec --no-startup-id new-workspace.py --move $ws20

# ============================ WORKSPACE-RELATED ==============================

# as the name says (i3-gaps), I'm using smart_gaps with a custom margin
smart_gaps on
smart_borders on
gaps inner 5
#gaps outer 10
#border_radius 2
# border for active/focused window
for_window [class="^.*"] border pixel 3

# color class            border  backgr. text    indicator child_border
client.focused           #bd93f9 #285577 #ffffff #2e9ef4   #bd93f9
#client.focused_inactive  #16161d #16161d #c0caf5 #16161d   #000000
#client.unfocused         #16161d #16161d #c0caf5 #16161d   #000000
#client.background        #000000

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# change focus
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

# move to next workspace
bindsym $mod+Control+Left workspace prev_on_output
bindsym $mod+Control+Right workspace next_on_output

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# split in horizontal orientation
bindsym $mod+Mod1+h split h

# split in vertical orientation
bindsym $mod+Mod1+v split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# toggle layout for split or tabbed (to get a fake fullscreen)
bindsym $mod+Control+f layout toggle splith tabbed

# TODO: create script/rofi to change container layout (stacked, tabbed, toggle split)
# bindsym $mod+s layout stacking
# bindsym $mod+w layout tabbed
# bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# resize window (you can also use the mouse for that)
mode "resize" {
    # These bindings trigger as soon as you enter the resize mode

    # Pressing left will shrink the window’s width.
    # Pressing right will grow the window’s width.
    # Pressing up will shrink the window’s height.
    # Pressing down will grow the window’s height.
    bindsym h resize shrink width 5 px or 5 ppt
    bindsym j resize grow height 5 px or 5 ppt
    bindsym k resize shrink height 5 px or 5 ppt
    bindsym l resize grow width 5 px or 5 ppt

    # same bindings, but for the arrow keys
    bindsym Left resize shrink width 5 px or 5 ppt
    bindsym Down resize grow height 5 px or 5 ppt
    bindsym Up resize shrink height 5 px or 5 ppt
    bindsym Right resize grow width 5 px or 5 ppt

    # back to normal: Enter or Escape or $mod+r
    bindsym Return mode "default"
    bindsym Escape mode "default"
    bindsym $mod+r mode "default"
}

# resize active container
bindsym $mod+r mode "resize"

# =============================== I3 KEYBINDS =================================

# reload the configuration file
bindsym $mod+Shift+c reload

# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart

# exit i3 (logs you out of your X session)
bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"

# ============================= DUNST KEYBINDS ================================

# close notification
bindsym Control+space exec --no-startup-id dunstctl close

# reopen notification
bindsym $mod+n exec --no-startup-id dunstctl history-pop

# ============================== KEY BINDINGS =================================

# interactive screenshot by pressing printscreen
bindsym Print exec --no-startup-id gnome-screenshot -i

# crop-area screenshot by pressing Mod + printscreen
bindsym $mod+Print exec --no-startup-id "maim -s --format=png /dev/stdout | xclip -selection clipboard -t image/png -i"

# rename current workspace
bindsym $mod+u exec --no-startup-id rename-workspace.sh

# create new workspace
bindsym $mod+Control+t exec --no-startup-id new-workspace.py --create

# move container to new workspace
bindsym $mod+Shift+t exec --no-startup-id new-workspace.py --new

# start a terminal
#bindsym $mod+Return exec i3-sensible-terminal
bindsym $mod+Return exec kitty

# kill focused window
bindsym $mod+Shift+q [con_id="__focused__" title="^(?!dropdown-terminal).*$"] kill

# visually focus another window
bindsym $mod+Tab exec --no-startup-id switch-window.sh --focus

# list all windows opened and choose which one you want to switch to
bindsym $mod+Shift+Tab exec --no-startup-id switch-window.sh --switch

# start custom-themed rofi (a program launcher)
bindsym $mod+d exec --no-startup-id launcher.sh

# open explorer
# bindsym $mod+e exec --no-startup-id nautilus

# lock window
bindsym $mod+Control+l exec i3lock -c 000000

# work mode
bindsym $mod+w exec --no-startup-id work-mode.sh

# display brightness
bindsym XF86MonBrightnessUp exec --no-startup-id brightnessctl set +5%
bindsym XF86MonBrightnessDown exec --no-startup-id brightnessctl set 5%-

# =========================== STARTUP APPLICATIONS ============================

# Combination of xss-lock and pactl is a popular choice, and I liked,
# so they are included here.

# xss-lock grabs a logind suspend inhibit lock and will use i3lock to lock the
# screen before suspend. Use loginctl lock-session to lock your screen.
exec --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork

# set default keyboard layout (PT-BR)
# setxkbmap -model abnt2 -layout br

# set default keyboard layout (EN-US)
exec --no-startup-id setxkbmap -layout us -variant intl

# floating terminal
exec --no-startup-id kitty --title dropdown-terminal -e zsh -o 'ignoreeof' &

# enable NUMLOCK on startup
#exec_always --no-startup-id numlockx &

# run monitor to save any notification message sent through DBus
exec --no-startup-id monitor-notification.py & > /dev/null

# (old way) setup wallpaper
exec_always --no-startup-id feh --bg-fill $HOME/Pictures/Wallpapers/samurai_panda.png

# use nitrogen to set wallpaper in the second monitor
# nitrogen --restore

# 2.0: now it is the time for the live wallpaper (yeah, I'm living the dream! 'til I get bored...)
# P.S.: I won't upload mp4 here, so if you want to use it something similar, just look for any
# wallpaper from Wallpaper Engine Workshop.
# pkill xwinwrap; wallpaper-animated.sh $HOME/Pictures/Wallpapers/in_the_clouds.mp4
# exec_always --no-startup-id video-wallpaper.sh --stop; video-wallpaper.sh --start "/$HOME/Pictures/Wallpapers/marooned.mp4"

# To setup monitor layout, apply current meta mode using NVIDIA X Server Settings
# https://wiki.archlinux.org/title/NVIDIA#Using_nvidia-settings
exec --no-startup-id nvidia-settings --load-config-only

# start polybar
exec_always --no-startup-id $HOME/.config/polybar/launch.sh

# applet for volume control
exec --no-startup-id pasystray &

# scroll velocity
# imwheel -b "4 5"

# start compositor
exec --no-startup-id picom --backend glx -b

# Patchbay GUI for Pipewire
exec --no-startup-id qpwgraph -m &

# NetworkManager is the most popular way to manage wireless networks on Linux,
# and nm-applet is a desktop environment-independent system tray GUI for it.
# nm-applet &

# if you use chrome as default browser and it is not autocompleting any saved
# password, check if gnome-keyring-daemon is running, if not, add this:
#  gnome-keyring-daemon --start --components=secrets
# also, must add this argument to chrome.desktop:
#  --password-store=gnome-libsecret

# focus animation for new window
# exec_always --no-startup-id flashfocus &

# noise reduction for microphone
exec --no-startup-id noisetorch -i -s alsa_input.usb-Kingston_HyperX_Quadcast_4110-00.capture.0.0 -t 90

# ================================= CUSTOM ====================================

# floating terminal with kitty
for_window [class="kitty" title="dropdown-terminal"] sticky enable
for_window [class="kitty" title="dropdown-terminal"] move scratchpad
bindsym $mod+t [class="kitty" title="dropdown-terminal"] scratchpad show

# created as popup on click from module in polybar
for_window [class="Yad" title="yad-calendar"] floating enable

# volume control
for_window [class="Pavucontrol"] floating enable, resize set 800px 600px, move position center

# configure popups from google-chrome as floating
for_window [class="Google-chrome" window_role="pop-up"] floating enable
